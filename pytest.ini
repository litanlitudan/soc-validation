[pytest]
# SoC Validation Test Infrastructure - Pytest Configuration

# Minimum version check
minversion = 7.0

# Test discovery paths
testpaths = tests

# Python path additions
pythonpath = src

# Test file patterns
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Command line options
addopts = 
    # Show verbose output
    -v
    # Show extra test summary info
    -ra
    # Strict markers
    --strict-markers
    # Short traceback format
    --tb=short
    # Coverage options
    --cov=src
    --cov-report=term-missing:skip-covered
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=50
    # Asyncio mode
    --asyncio-mode=auto
    # Show slowest tests
    --durations=10
    # Parallel execution (uncomment for parallel tests)
    # -n auto

# Test markers
markers =
    unit: Unit tests - fast, isolated tests
    integration: Integration tests - test component interactions
    e2e: End-to-end tests - full system tests
    slow: Slow running tests
    smoke: Smoke tests - basic functionality
    hardware: Tests requiring actual hardware
    ci: Tests to run in CI pipeline
    skip_ci: Tests to skip in CI pipeline

# Coverage configuration
[coverage:run]
source = src
omit = 
    */tests/*
    */test_*.py
    */__init__.py
    */config.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    def __str__
    raise AssertionError
    raise NotImplementedError
    if __name__ == "__main__":
    if TYPE_CHECKING:
    @abstractmethod
    @abc.abstractmethod

# Asyncio configuration
[tool:pytest]
asyncio_mode = auto

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s - %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Timeout configuration (seconds)
timeout = 300
timeout_method = thread

# Warning filters
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::ResourceWarning